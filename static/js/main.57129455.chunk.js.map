{"version":3,"sources":["components/firebase.js","components/Login.js","components/WeatherEffect.js","components/Quiz.js","components/Admin.js","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","Login","username","setUsername","useState","role","setRole","error","setError","navigate","useNavigate","React","createElement","className","onSubmit","async","e","preventDefault","trim","playerRef","ref","get","exists","set","score","completedQuestions","timestamp","Date","now","sessionStorage","setItem","console","htmlFor","id","type","value","onChange","target","placeholder","WeatherEffect","_ref","duration","visible","setVisible","randomOffset","setRandomOffset","x","Math","random","y","rotation","useEffect","timer","setTimeout","clearTimeout","style","transform","renderRain","drops","i","push","key","animationDuration","renderSun","rays","Quiz","currentQuestion","setCurrentQuestion","setScore","showScore","setShowScore","showWeatherEffect","setShowWeatherEffect","questions","setQuestions","showStoryInput","setShowStoryInput","story","setStory","currentQuestionId","setCurrentQuestionId","timeLeft","setTimeLeft","timerActive","setTimerActive","imageRevealClass","setImageRevealClass","isRevealComplete","setIsRevealComplete","currentPlayer","getItem","isPlaying","stories","catch","selectedQuestions","questionsData","sort","slice","setInterval","prev","newTime","revealPercentage","floor","min","clearInterval","length","width","onClick","handleLogout","removeItem","playerData","val","currentStories","questionId","nextQuestion","required","Fragment","src","imageUrl","alt","onError","question","options","map","option","index","isCorrect","selectedAnswer","correctAnswer","newScore","effect","Array","keys","q","handleAnswerClick","Admin","players","setPlayers","loading","setLoading","playersRef","unsubscribe","onValue","snapshot","playersData","playersArray","Object","entries","filter","_","data","_ref2","a","b","player","_player$completedQues","toLocaleString","colSpan","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.57129455.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics, getGoogleAnalyticsClientId } from \"firebase/analytics\";\nimport { getDatabase, ref, set, get, onValue } from \"firebase/database\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCSHjU7DgtcqFAN067UM1fj4J8h-2hqaUE\",\n  authDomain: \"quizgame-dd714.firebaseapp.com\",\n  databaseURL: \"https://quizgame-dd714-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"quizgame-dd714\",\n  storageBucket: \"quizgame-dd714.firebasestorage.app\",\n  messagingSenderId: \"164919175813\",\n  appId: \"1:164919175813:web:caecd6e8d35d3f848ad7ec\",\n  measurementId: \"G-58CQ6070C8\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\n\nexport { db, ref, set, get, onValue };","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { db, ref, get, set } from './firebase';\nimport '../styles/index.css';\n\nconst Login = () => {\n    const [username, setUsername] = useState('');\n    const [role, setRole] = useState('player');\n    const [error, setError] = useState('');\n    const navigate = useNavigate();\n\n    const handleLogin = async (e) => {\n        e.preventDefault();\n        if (!username.trim()) {\n            setError('Please enter a username');\n            return;\n        }\n\n        try {\n            // Check if admin credentials are correct\n            if (role === 'admin') {\n                if (username !== 'admin123') {\n                    setError('Invalid admin credentials');\n                    return;\n                }\n                navigate('/admin');\n            } else {\n                // For players, create/update player record\n                const playerRef = ref(db, `players/${username}`);\n                const snapshot = await get(playerRef);\n\n                if (!snapshot.exists()) {\n                    // If player doesn't exist, initialize their score\n                    await set(playerRef, {\n                        score: 0,\n                        completedQuestions: [],\n                        timestamp: Date.now()\n                    });\n                }\n\n                // Store username in sessionStorage\n                sessionStorage.setItem('currentPlayer', username);\n                navigate('/quiz');\n            }\n        } catch (error) {\n            setError('Error logging in. Please try again.');\n            console.error(error);\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <div className=\"login-container fade-in\">\n                <h1>Quiz Game Login</h1>\n\n                {error && (\n                    <div className=\"error-message\">\n                        {error}\n                    </div>\n                )}\n\n                <form onSubmit={handleLogin} className=\"login-form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"username\">Username</label>\n                        <input\n                            id=\"username\"\n                            type=\"text\"\n                            value={username}\n                            onChange={(e) => setUsername(e.target.value)}\n                            placeholder=\"Enter your username\"\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"role\">Role</label>\n                        <select\n                            id=\"role\"\n                            value={role}\n                            onChange={(e) => setRole(e.target.value)}\n                        >\n                            <option value=\"player\">Player</option>\n                            <option value=\"admin\">Admin</option>\n                        </select>\n                    </div>\n\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        Login\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default Login; ","import React, { useEffect, useState } from 'react';\nimport '../styles/weather.css';\n\nconst WeatherEffect = ({ type, duration = 2000 }) => {\n    const [visible, setVisible] = useState(true);\n    const [randomOffset, setRandomOffset] = useState({\n        x: Math.random() * 100 - 50,\n        y: Math.random() * 100 - 50,\n        rotation: Math.random() * 360\n    });\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setVisible(false);\n        }, duration);\n\n        return () => clearTimeout(timer);\n    }, [duration]);\n\n    if (!visible) return null;\n\n    const renderRain = () => {\n        const drops = [];\n        for (let i = 0; i < 10; i++) {\n            drops.push(\n                <div\n                    key={i}\n                    className=\"raindrop\"\n                    style={{\n                        animationDuration: `${Math.random() * 0.5 + 0.5}s`,\n                        transform: `translateX(${Math.random() * 100}%) rotate(${Math.random() * 30 - 15}deg)`\n                    }}\n                />\n            );\n        }\n        return <div className=\"rain\">{drops}</div>;\n    };\n\n    const renderSun = () => {\n        const rays = [];\n        for (let i = 0; i < 10; i++) {\n            rays.push(\n                <div\n                    key={i}\n                    className=\"sun-ray\"\n                    style={{\n                        animationDuration: `${Math.random() * 2 + 2}s`,\n                        transform: `rotate(${i * 36}deg) translateZ(${Math.random() * 20 + 10}px)`\n                    }}\n                />\n            );\n        }\n        return (\n            <div className=\"sun\">\n                <div className=\"sun-rays\" style={{ transform: `rotateX(${randomOffset.rotation}deg) rotateY(${randomOffset.rotation}deg)` }}>\n                    {rays}\n                    <div className=\"sun-core\" />\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div\n            className=\"weather-effect\"\n            style={{\n                transform: `translate(${randomOffset.x}px, ${randomOffset.y}px)`\n            }}\n        >\n            {type === 'rain' ? renderRain() : renderSun()}\n        </div>\n    );\n};\n\nexport default WeatherEffect; ","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { db, ref, set, get } from './firebase';\nimport WeatherEffect from './WeatherEffect';\nimport '../styles/index.css';\nimport questionsData from '../data/questions.json';\n\nconst Quiz = () => {\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [score, setScore] = useState(0);\n    const [showScore, setShowScore] = useState(false);\n    const [username, setUsername] = useState('');\n    const [showWeatherEffect, setShowWeatherEffect] = useState(null);\n    const [questions, setQuestions] = useState([]);\n    const [showStoryInput, setShowStoryInput] = useState(false);\n    const [story, setStory] = useState('');\n    const [currentQuestionId, setCurrentQuestionId] = useState(null);\n    const [timeLeft, setTimeLeft] = useState(15);\n    const [timerActive, setTimerActive] = useState(true);\n    const [imageRevealClass, setImageRevealClass] = useState('reveal-image');\n    const [isRevealComplete, setIsRevealComplete] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const currentPlayer = sessionStorage.getItem('currentPlayer');\n        if (!currentPlayer) {\n            navigate('/');\n            return;\n        }\n        setUsername(currentPlayer);\n\n        // Initialize player status\n        const playerRef = ref(db, `players/${currentPlayer}`);\n        set(playerRef, {\n            score: 0,\n            completedQuestions: [],\n            currentQuestion: 1,\n            isPlaying: true,\n            timestamp: Date.now(),\n            stories: {}\n        }).catch(error => {\n            console.error('Error initializing player status:', error);\n        });\n\n        // Select random questions\n        const allQuestions = questionsData.questions;\n        const shuffledQuestions = [...allQuestions].sort(() => Math.random() - 0.5);\n        const selectedQuestions = shuffledQuestions.slice(0, 10);\n        setQuestions(selectedQuestions);\n    }, [navigate]);\n\n    // Timer effect\n    useEffect(() => {\n        if (timerActive && timeLeft > 0 && !showStoryInput && !showScore) {\n            const timer = setTimeout(() => {\n                setTimeLeft(timeLeft - 1);\n            }, 1000);\n            return () => clearTimeout(timer);\n        } else if (timeLeft === 0 && timerActive) {\n            // Time's up, handle as incorrect answer\n            setTimerActive(false);\n            setCurrentQuestionId(questions[currentQuestion].id);\n            setShowStoryInput(true);\n        }\n    }, [timeLeft, timerActive, currentQuestion, questions, showStoryInput, showScore]);\n\n    // Reset timer when moving to next question\n    useEffect(() => {\n        if (!showStoryInput && !showScore) {\n            setTimeLeft(15);\n            setTimerActive(true);\n        }\n    }, [currentQuestion, showStoryInput, showScore]);\n\n    // Reset hiệu ứng khi chuyển câu hỏi\n    useEffect(() => {\n        setImageRevealClass('reveal-image');\n        setIsRevealComplete(false);\n    }, [currentQuestion]);\n\n    const handleTimeUp = () => {\n        setTimerActive(false);\n        setCurrentQuestionId(questions[currentQuestion].id);\n        setShowStoryInput(true);\n    };\n\n    // Timer effect\n    useEffect(() => {\n        if (timeLeft > 0 && !showStoryInput && !showScore) {\n            const timer = setInterval(() => {\n                setTimeLeft((prev) => {\n                    const newTime = prev - 1;\n                    // Cập nhật hiệu ứng hiển thị hình ảnh\n                    const revealPercentage = Math.floor((1 - newTime / 20) * 100);\n                    setImageRevealClass(`reveal-image-${Math.min(revealPercentage, 100)}`);\n\n                    if (revealPercentage >= 100) {\n                        setIsRevealComplete(true);\n                    }\n\n                    return newTime;\n                });\n            }, 1000);\n\n            return () => clearInterval(timer);\n        } else if (timeLeft === 0 && !showStoryInput && !showScore) {\n            handleTimeUp();\n        }\n    }, [timeLeft, showStoryInput, showScore]);\n\n    const handleAnswerClick = async (selectedAnswer) => {\n        setTimerActive(false);\n        const isCorrect = selectedAnswer === questions[currentQuestion].correctAnswer;\n        const newScore = isCorrect ? score + 1 : score;\n        setScore(newScore);\n\n        if (isCorrect) {\n            // Randomly choose between rain and sun effect\n            const effect = Math.random() > 0.5 ? 'rain' : 'sun';\n            setShowWeatherEffect(effect);\n            setTimeout(() => setShowWeatherEffect(null), 2000);\n        } else {\n            // Show story input for incorrect answer\n            setCurrentQuestionId(questions[currentQuestion].id);\n            setShowStoryInput(true);\n            return; // Don't proceed to next question until story is submitted\n        }\n\n        const nextQuestion = currentQuestion + 1;\n        const playerRef = ref(db, `players/${username}`);\n\n        try {\n            if (nextQuestion < questions.length) {\n                await set(playerRef, {\n                    score: newScore,\n                    completedQuestions: [...Array(currentQuestion + 1).keys()].map(i => i + 1),\n                    currentQuestion: nextQuestion + 1,\n                    isPlaying: true,\n                    timestamp: Date.now()\n                });\n                setCurrentQuestion(nextQuestion);\n            } else {\n                await set(playerRef, {\n                    score: newScore,\n                    completedQuestions: questions.map(q => q.id),\n                    currentQuestion: null,\n                    isPlaying: false,\n                    timestamp: Date.now()\n                });\n                setShowScore(true);\n            }\n        } catch (error) {\n            console.error('Error updating player status:', error);\n        }\n    };\n\n    const handleStorySubmit = async (e) => {\n        e.preventDefault();\n        if (!story.trim()) return;\n\n        const playerRef = ref(db, `players/${username}`);\n        try {\n            // Get current player data\n            const snapshot = await get(playerRef);\n            const playerData = snapshot.val() || {};\n            const currentStories = playerData.stories || {};\n\n            // Add new story\n            currentStories[currentQuestionId] = {\n                story: story.trim(),\n                timestamp: Date.now(),\n                questionId: currentQuestionId\n            };\n\n            // Update player data with new story\n            await set(playerRef, {\n                ...playerData,\n                stories: currentStories\n            });\n\n            // Reset story input and proceed to next question\n            setStory('');\n            setShowStoryInput(false);\n            setCurrentQuestionId(null);\n\n            // Move to next question\n            const nextQuestion = currentQuestion + 1;\n            if (nextQuestion < questions.length) {\n                setCurrentQuestion(nextQuestion);\n            } else {\n                setShowScore(true);\n            }\n        } catch (error) {\n            console.error('Error saving story:', error);\n        }\n    };\n\n    const handleRetry = async () => {\n        const playerRef = ref(db, `players/${username}`);\n        try {\n            await set(playerRef, {\n                score: 0,\n                completedQuestions: [],\n                currentQuestion: 1,\n                isPlaying: true,\n                timestamp: Date.now(),\n                stories: {}\n            });\n\n            // Select new random questions\n            const allQuestions = questionsData.questions;\n            const shuffledQuestions = [...allQuestions].sort(() => Math.random() - 0.5);\n            const selectedQuestions = shuffledQuestions.slice(0, 10);\n            setQuestions(selectedQuestions);\n\n            setCurrentQuestion(0);\n            setScore(0);\n            setShowScore(false);\n            setShowStoryInput(false);\n            setStory('');\n            setCurrentQuestionId(null);\n            setTimeLeft(15);\n            setTimerActive(true);\n        } catch (error) {\n            console.error('Error resetting player status:', error);\n        }\n    };\n\n    const handleLogout = () => {\n        sessionStorage.removeItem('currentPlayer');\n        navigate('/');\n    };\n\n    if (!username || questions.length === 0) {\n        return <div className=\"container\">Loading...</div>;\n    }\n\n    return (\n        <div className=\"container\">\n            {showWeatherEffect && <WeatherEffect type={showWeatherEffect} />}\n            <div className=\"quiz-container fade-in\">\n                <div className=\"quiz-header\">\n                    <span>Question {currentQuestion + 1}/{questions.length}</span>\n                    <div className=\"timer-container\">\n                        <div className=\"timer-text\">\n                            <span>Time Left: </span>\n                            <span className={timeLeft <= 5 ? 'time-warning' : ''}>{timeLeft}s</span>\n                        </div>\n                        <div className=\"timer-progress\">\n                            <div\n                                className={`timer-progress-bar ${timeLeft <= 5 ? 'warning' : ''}`}\n                                style={{ width: `${(timeLeft / 15) * 100}%` }}\n                            />\n                        </div>\n                    </div>\n                    <span>Score: {score}</span>\n                </div>\n\n                {showScore ? (\n                    <div className=\"quiz-score\">\n                        <h2>Quiz Completed!</h2>\n                        <p>You scored {score} out of {questions.length}</p>\n                        <div className=\"quiz-actions\">\n                            <button onClick={handleRetry} className=\"btn btn-primary\">\n                                Try Again\n                            </button>\n                            <button onClick={handleLogout} className=\"btn btn-secondary\">\n                                Logout\n                            </button>\n                        </div>\n                    </div>\n                ) : showStoryInput ? (\n                    <div className=\"story-input\">\n                        <h2>Oops! {timeLeft === 0 ? \"Time's up!\" : \"That's not correct.\"}</h2>\n                        <p>Please share a short story or experience related to this question:</p>\n                        <form onSubmit={handleStorySubmit}>\n                            <textarea\n                                value={story}\n                                onChange={(e) => setStory(e.target.value)}\n                                placeholder=\"Share your story here...\"\n                                className=\"story-textarea\"\n                                required\n                            />\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                Submit Story\n                            </button>\n                        </form>\n                    </div>\n                ) : (\n                    <>\n                        <div className=\"quiz-question\">\n                            <div className={`question-image-container ${isRevealComplete ? 'reveal-complete' : ''}`}>\n                                <img\n                                    src={questions[currentQuestion].imageUrl}\n                                    alt=\"Gợi ý câu hỏi\"\n                                    className={`question-image ${imageRevealClass}`}\n                                    onError={(e) => {\n                                        e.target.src = 'https://via.placeholder.com/300x200?text=No+Image';\n                                    }}\n                                />\n                            </div>\n                            <h2 className=\"question-text\">{questions[currentQuestion].question}</h2>\n                        </div>\n                        <div className=\"quiz-options\">\n                            {questions[currentQuestion].options.map((option, index) => (\n                                <button\n                                    key={index}\n                                    onClick={() => handleAnswerClick(option)}\n                                    className=\"option-button\"\n                                >\n                                    {option}\n                                </button>\n                            ))}\n                        </div>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Quiz; ","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { db, ref, onValue } from './firebase';\nimport '../styles/index.css';\n\nconst Admin = () => {\n    const [players, setPlayers] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const playersRef = ref(db, 'players');\n\n        // Set up real-time listener\n        const unsubscribe = onValue(playersRef, (snapshot) => {\n            try {\n                if (snapshot.exists()) {\n                    const playersData = snapshot.val();\n                    const playersArray = Object.entries(playersData)\n                        .filter(([_, data]) => data !== null) // Filter out null entries\n                        .map(([username, data]) => ({\n                            username,\n                            ...data\n                        }));\n\n                    // Sort by score (highest first)\n                    playersArray.sort((a, b) => (b.score || 0) - (a.score || 0));\n                    setPlayers(playersArray);\n                } else {\n                    setPlayers([]);\n                }\n            } catch (error) {\n                console.error('Error processing player data:', error);\n                setPlayers([]);\n            } finally {\n                setLoading(false);\n            }\n        }, (error) => {\n            console.error('Error fetching players:', error);\n            setLoading(false);\n            setPlayers([]);\n        });\n\n        // Cleanup listener on unmount\n        return () => unsubscribe();\n    }, []);\n\n    const handleLogout = () => {\n        navigate('/');\n    };\n\n    if (loading) {\n        return (\n            <div className=\"min-h-screen flex items-center justify-center\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"></div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"admin-container fade-in\">\n                <div className=\"admin-header\">\n                    <h1>Admin Dashboard</h1>\n                    <button\n                        onClick={handleLogout}\n                        className=\"btn btn-secondary\"\n                    >\n                        Logout\n                    </button>\n                </div>\n\n                <div className=\"table-responsive\">\n                    <table className=\"admin-table\">\n                        <thead>\n                            <tr>\n                                <th>Rank</th>\n                                <th>Username</th>\n                                <th>Current Score</th>\n                                <th>Questions Answered</th>\n                                <th>Current Question</th>\n                                <th>Status</th>\n                                <th>Last Updated</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {players.map((player, index) => (\n                                <tr key={player.username}>\n                                    <td>{index + 1}</td>\n                                    <td>{player.username}</td>\n                                    <td>{player.score || 0}</td>\n                                    <td>{player.completedQuestions?.length || 0}</td>\n                                    <td>\n                                        {player.currentQuestion ? `Question ${player.currentQuestion}` : 'Not started'}\n                                    </td>\n                                    <td>\n                                        {player.isPlaying ? (\n                                            <span className=\"text-success\">Playing</span>\n                                        ) : (\n                                            <span className=\"text-muted\">Completed</span>\n                                        )}\n                                    </td>\n                                    <td>\n                                        {new Date(player.timestamp).toLocaleString()}\n                                    </td>\n                                </tr>\n                            ))}\n                            {players.length === 0 && (\n                                <tr>\n                                    <td colSpan=\"7\" className=\"text-center\">\n                                        No players found\n                                    </td>\n                                </tr>\n                            )}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Admin; ","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Login from './components/Login';\nimport Quiz from './components/Quiz';\nimport Admin from './components/Admin';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Login />} />\n        <Route path=\"/quiz\" element={<Quiz />} />\n        <Route path=\"/admin\" element={<Admin />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}